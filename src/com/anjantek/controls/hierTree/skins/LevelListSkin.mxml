<?xml version="1.0" encoding="utf-8"?>

<!--

ADOBE SYSTEMS INCORPORATED
Copyright 2008 Adobe Systems Incorporated
All Rights Reserved.

NOTICE: Adobe permits you to use, modify, and distribute this file
in accordance with the terms of the license agreement accompanying it.

-->

<!--- The default skin class for a Spark List component.  

@see spark.components.List

@langversion 3.0
@playerversion Flash 10
@playerversion AIR 1.5
@productversion Flex 4
-->
<s:SparkSkin xmlns:fx="http://ns.adobe.com/mxml/2009"
			 xmlns:s="library://ns.adobe.com/flex/spark"
			 xmlns:fb="http://ns.adobe.com/flashbuilder/2009"
			 minWidth="112" blendMode="normal"
			 alpha.disabled="0.5"> 
	<fx:Metadata>[HostComponent("com.anjantek.controls.hierTree.supportClasses.LevelList")]</fx:Metadata>
	
	<fx:Script fb:purpose="styling">
		<![CDATA[
			
			import mx.core.FlexVersion;
			
			/* Define the skin elements that should not be colorized. 
			For list, the skin itself is colorized but the individual parts are not. */
			static private const exclusions:Array = ["scroller", "background", "border"];
			
			/* exclusions before Flex 4.5 for backwards-compatibility purposes */
			static private const exclusions_4_0:Array = ["scroller", "background"];
			
			//-------------------------------------------------------------------------------------------------
			
			/**
			 * @private
			 */
			override public function get colorizeExclusions():Array 
			{
				// Since border is styleable via borderColor, no need to allow chromeColor to affect
				// the border.  This is wrapped in a compatibility flag since this change was added  
				// in Flex 4.5
				if (FlexVersion.compatibilityVersion < FlexVersion.VERSION_4_5)
				{
					return exclusions_4_0;
				}
				
				return exclusions;
			}
			
			//-------------------------------------------------------------------------------------------------
			
			/* Define the content fill items that should be colored by the "contentBackgroundColor" style. */
			static private const contentFill:Array = ["bgFill"];
			
			/**
			 * @private
			 */
			override public function get contentItems():Array {return contentFill};
			
			//-------------------------------------------------------------------------------------------------
			
			/**
			 * @private
			 */
			override protected function initializationComplete():void
			{
				useChromeColor = true;
				super.initializationComplete();
			}
			
			//-------------------------------------------------------------------------------------------------
			
			/**
			 * @private
			 */
			override protected function updateDisplayList(unscaledWidth:Number, unscaledHeight:Number):void
			{
				//trace( "Level:", hostComponent.level, "Width", unscaledWidth, "Height", unscaledHeight );
				
				if (getStyle("borderVisible") == true)
				{
					border.data = getPathData( unscaledWidth, unscaledHeight, 1 );
					border.visible = true;
					scroller.minViewportInset = 1;
				}
				else
				{
					border.visible = false;
					scroller.minViewportInset = 0;
				}
				
				borderStroke.color = getStyle("borderColor");
				borderStroke.alpha = getStyle("borderAlpha");
				
				super.updateDisplayList(unscaledWidth, unscaledHeight);
			}
			
			//-------------------------------------------------------------------------------------------------
			
			protected function getPathData( __width: Number, __height: Number, __padding: Number ): String
			{
				// Build "data".
				__width -= __padding;
				__height -= __padding;
				
				const half_width: Number = Math.round( __width / 2 );
				const arrow_width: Number = 30;
				const arrow_left_x: Number = Math.round( half_width - (arrow_width / 2) ) + __padding;
				const arrow_right_x: Number = Math.round( half_width + (arrow_width / 2) ) - __padding;
				const arrow_top_y: Number = 0 + __padding;
				const arrow_bottom_y: Number = 19 + __padding;
				
				var data: String = "M " + __padding + " " + arrow_bottom_y + " ";
				
				if( 0 != hostComponent.level )
				{
					data += "H " + arrow_left_x + " ";
					data += "L " + half_width + " " + arrow_top_y + " ";
					data += "L " + arrow_right_x + " " + arrow_bottom_y + " ";
				}
				
				data += "H " + __width + " ";
				data += "V " + __height + " ";
				data += "H " + __padding + " ";
				data += "Z";
				
				return data;
			}
			
			//-------------------------------------------------------------------------------------------------
			
		]]>
	</fx:Script>
	
	<s:states>
		<s:State name="normal"/>
		<s:State name="disabled"/>
	</s:states>
	
	<fx:Declarations>
		<!--- 
		Defines the appearance of the the List's drop indicator.
		To customize the drop indicator appearance, create a custom ListSkin class.
		The List's layout takes care to size and position the dropIndicator.
		The size of the <code>dropIndicator</code> is typically set to the size of the gaps between the items.
		The minimum and maximum settings are typically respected only in the direction
		along the major axis (the gap axis).  For example a VerticalLayout ignores the 
		<code>minWidth</code> and <code>maxWidth</code> settings, 
		but respect <code>minHeight</code> and <code>maxHeight</code>. 
		
		@copy spark.components.List#dropIndicator
		-->
		<fx:Component id="dropIndicator">
			<s:Group minWidth="3" minHeight="3" maxWidth="3" maxHeight="3">
				<s:Rect left="0" right="0" top="0" bottom="0">
					<s:fill>
						<!--- Defines the color of the background. -->
						<s:SolidColor color="0xBBBBBB"/>
					</s:fill>
					<s:stroke>
						<s:SolidColorStroke color="0x868686" weight="1"/>
					</s:stroke>
				</s:Rect>
			</s:Group>
		</fx:Component>
	</fx:Declarations>
	
	<!-- border -->
	<!--- @private -->
	<s:Path id="border">
		<s:stroke>
			<!--- @private -->
			<s:SolidColorStroke id="borderStroke" weight="1"/>
		</s:stroke>
		
		<s:fill>
			<s:SolidColor alpha="0.2" color="0x0000FF"/>
		</s:fill>
	</s:Path>
	
	<!-- fill -->
	<!--- Defines the background appearance of the list-based component. -->
	<s:Path id="background" visible="false">
		<s:fill>
			<s:SolidColor id="bgFill" alpha="0.2" color="0x0000FF"/>
		</s:fill>
	</s:Path>
	
	<!--- The Scroller component to add scroll bars to the list. -->
	<s:Scroller id="scroller" left="2" right="2" top="22" bottom="2" hasFocusableChildren="false"
				minViewportInset="1">
		<!--- @copy spark.components.SkinnableDataContainer#dataGroup -->
		<s:DataGroup id="dataGroup">
			<s:layout>
				<s:HorizontalLayout horizontalAlign="center" paddingBottom="2" paddingLeft="2"
									paddingRight="2" paddingTop="2" requestedMinColumnCount="1"
									verticalAlign="middle"/>
			</s:layout>
		</s:DataGroup>
	</s:Scroller>
</s:SparkSkin>
